<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="google-site-verification" content="xBT4GhYoi5qRD5tr338pgPM5OWHHIDR6mNg1a3euekI" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#000000">
    <link rel="icon" href="../images/shortcuticon.jpg">
    <style>

    </style>
    <title>输入的url何去何从?</title>
    <!-- Web App Manifest -->
    <!-- Bootstrap Core CSS -->
    <link rel="stylesheet" href="../css/bootstrap.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="../css/tk-blog.min.css">
    <!-- Pygments Github CSS -->
    <link rel="stylesheet" href="../css/syntax.css">
    <!-- Custom Fonts -->
    <!-- <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0../css/font-awesome.min.css" rel="stylesheet" type="text../css"> -->
    <!-- tk change font-awesome CDN to qiniu -->
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- ga & ba script hoook -->
    <script></script>
</head>

<body ng-app='app' ng-controller='form'>
    <nav class="navbar navbar-default navbar-custom navbar-fixed-top">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header page-scroll">
                <button type="button" class="navbar-toggle">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="../index.html">tk-Canday Blog</a>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div id="tkblog_navbar">
                <div class="navbar-collapse">
                    <ul class="nav navbar-nav navbar-right">
                    </ul>
                </div>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </nav>
    <header class="intro-header">
        <div class="header-mask"></div>
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    <div class="post-heading">
                        <div class="tags">
                            <a class="tag" href="../index.html" title="首页">返回首页</a>
                        </div>
                        <h1> 一个页面从输入 URL 到页面加载完的过程中<br>都发生了什么事情？</h1>
                        <h2 class="subheading"></h2>
                        <span class="meta">Posted by tk-canday on December
 10, 2016</span>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <div style='padding-left:15%;text-indent:20px;'>
        <br> 过程概述
        <br> 1. 浏览器查找域名对应的 IP 地址；
        <br> 2. 浏览器根据 IP 地址与服务器建立 socket 连接；
        <br> 3. 浏览器与服务器通信： 浏览器请求，服务器处理请求；
        <br> 4. 浏览器与服务器断开连接。
        <br> 以下为详细解析:
        <br>根据域名查找 IP 地址
        <br>概念解释:
        <p>IP 地址：IP 协议为互联网上的每一个网络和每一台主机分配的一个逻辑地址。IP 地址如同门牌号码，通过 IP
            <br>地址才能确定一台主机位置。服务器本质也是一台主机，想要访问某个服务器，必须先知道它的 IP 地址；
            <br>域名（ DN ）：IP
        </p>
        <br>地址由四个数字组成，中间用点号连接，在使用过程中难记忆且易输入错误，所以用我们熟悉的字母和数字组合来代
        <br>替纯数字的
        <br>IP 地址，比如我们只会记住 www.baidu.com（百度域名） 而不是 220.181.112.244（百度的其中一个 IP 地址）；
        <br>DNS： 每个域名都对应一个或多个提供相同服务服务器的 IP 地址，只有知道服务器 IP
        <br>地址才能建立连接，所以需要通过 DNS
        <br>把域名解析成一个 IP 地址。
        <br>知道了上面的概念，大概就知道了想要获得服务器的门牌号码，需要先将域名转换成 IP
        <br>地址。转换过程如下（以查询 www.baidu.
        <br>com 的 IP 地址为例，其中2、3、4步均在上一步未查询成功的情况下进行）：
        <br>查找过程
        <br> 1.浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）；
        <br> 2.搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）；
        <br> 3.搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；
        <br> 4.操作系统将域名发送至 LDNS（本地区域名服务器，如果你在学校接入互联网，则 LDNS
        <br> 5.服务器就在学校，如果通过电信接入互联网，则 LDNS 服务器就在你当地的电信那里。）LDNS 查询自己的 DNS
        <br> 6.缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求；
        <br> 7.LDNS 向 Root Name Server （根域名服务器，其虽然没有每个域名的的具体信息，但存储了负责每个域，如
        <br> 8.com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com
        <br>域的顶级域名服务器的地址；
        <br>9.LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址；
        <br>10.LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址；
        <br>11.LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；
        <br>12.操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；
        <br>13.至此，浏览器已经得到了域名对应的 IP 地址。
        <br>补充说明
        <br>域名与 URL 是两个概念：域名是一台或一组服务器的名称，用来确定服务器在 Internet 上的位置；URL
        <br>是统一资源定位符，用来确定某一个文件的具体位置.
        <br>IP 地址与域名不是一一对应的关系：可以把多个提供相同服务的服务器 IP
        <br>设置为同一个域名，但在同一时刻一个域名只能解析出一个 IP地址；同时，一个 IP
        <br>地址可以绑定多个域名，数量不限；
        <br>建立连接--三次握手
        <br>知道了服务器的 IP 地址，下面便开始与服务器建立连接了。
        <br>通俗地讲，通信连接的建立需要经历以下三个过程：
        <br>1.主机向服务器发送一个建立连接的请求（您好，我想认识您）；
        <br>2.服务器接到请求后发送同意连接的信号（好的，很高兴认识您）；
        <br>3.主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了
        <br>连接。
        <br>补充说明
        <br>TCP 协议：三次握手的过程采用 TCP
        <br>协议，其可以保证信息传输的可靠性，三次握手过程中，若一方收不到确认信号，协议会要求重新发送信号。
        <br>网页请求与显示
        <br>当服务器与主机建立了连接之后，下面主机便与服务器进行通信。网页请求是一个单向请求的过程，即是一个主机向服务器请求数据，服务器返回相应的数据的过程。
        <br>浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等；
        <br>服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件；
        <br>服务器将得到的 HTML 文件发送给浏览器；
        <br>在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页；
        <br>在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、CSS、JavsScript等文件，过程同请求 HTML ；
        <br>断开连接--四次挥手
        <br>主机向服务器发送一个断开连接的请求（不早了，我该走了）；
        <br>服务器接到请求后发送确认收到请求的信号（知道了）；
        <br>服务器向主机发送断开通知（我也该走了）；
        <br>主机接到断开通知后断开连接并反馈一个确认信号（嗯，好的），服务器收到确认信号后断开连接；
        <br>补充说明
        <br>为什么服务器在接到断开请求时不立即同意断开：当服务器收到断开连接的请求时，可能仍然有数据未发送完毕，所
        <br>有服务器先发
        <br>送确认信号，等所有数据发送完毕后再同意断开。
        <br>第四次握手后，主机发送确认信号后并没有立即断开连接，而是等待了 2
        <br>个报文传送周期，原因是：如果第四次握手的确认信息丢
        <br>失，服务器将会重新发送第三次握手的断开连接的信号，而服务器发觉丢包与重新发送的断开连接到达主机的时间正
        <br>好为 2 个报文传输周期。
        <h5 style="color:yellowgreen;">留下您的评论:</h5>
        <form ng-submit='get()'>
            <input type="text" id="write" ng-model='say' style='width:80%'>
        </form>
        <div style="margin:0 0 66px 20px;padding:10px;border: 1px solid #000;width:80%">
            <p ng-repeat='review in reviews' style="margin:6px;background-color: rgba(148, 189, 22, 0.22);">
                {{ review.text }} <span style='float:right;font-size:10px;'>{{ review.time }}</span>
            </p>
        </div>
    </div>
    <script src="../js/bower_components/angular/angular.min.js"></script>
    <script src="../js/bower_components/angular-route/angular-route.min.js"></script>
    <script src="../js/angular/controller.js"></script>
</body>

</html>
