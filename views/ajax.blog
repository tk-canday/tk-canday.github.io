<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="google-site-verification" content="xBT4GhYoi5qRD5tr338pgPM5OWHHIDR6mNg1a3euekI" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="前端开发入门需要看的书总结">
    <meta name="theme-color" content="#000000">
    <link rel="icon" href="../images/shortcuticon.jpg">
    <style>

    </style>
    <title>前端书推荐</title>

    <!-- Web App Manifest -->

    <!-- Bootstrap Core CSS -->
    <link rel="stylesheet" href="../css/bootstrap.min.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="../css/tk-blog.min.css">

    <!-- Pygments Github CSS -->
    <link rel="stylesheet" href="../css/syntax.css">

    <!-- Custom Fonts -->
    <!-- <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0../css/font-awesome.min.css" rel="stylesheet" type="text../css"> -->
    <!-- tk change font-awesome CDN to qiniu -->


    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

    <!-- ga & ba script hoook -->
    <script></script>
    </head>


    <body>
	<nav class="navbar navbar-default navbar-custom navbar-fixed-top">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header page-scroll">
            <button type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="../index.html">tk-Canday Blog</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div id="tkblog_navbar">
            <div class="navbar-collapse">
                <ul class="nav navbar-nav navbar-right">
               
                </ul>
            </div>
        </div>
        <!-- /.navbar-collapse -->
    </div>
    <!-- /.container -->
</nav>

    <header class="intro-header" >
    <div class="header-mask"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <div class="tags">
                                             
                        <a class="tag" href="../index.html" title="首页">返回首页</a>
                        
                    </div>
                    <h1> ajax入门之——<br>&nbsp;建立XHR对象 </h1>
                    
                    
                    <h2 class="subheading"></h2>
                    
                    <span class="meta">Posted by tk-canday on May 21, 2016</span>
                </div>
            </div>
        </div>
    </div>
</header>
    <div><span class="RichText CopyrightRichText-richText">
 
<div style='padding-left:20%;text-indent:20px'>
今天帮朋友写了一个简单的ajax的demo,发现了一些东西，决定写一篇文章记录一下，避免以后挖坑。
<br>
创建XMLHttpRequest
<br>
通常
<br>
<pre>
    function createXHR(){       
       if(XMLHttpRequest){
           return new XMLHttpRequest();
       }else{
           return new ActiveXObject('Microsoft.XMLHTTP')
       }
    }
 <br>
</pre>
<br>这一段js代码来源自w3school,用于创建兼容各浏览器的XMLHttpRequest对象的含义：

<br>检测客户端是否有XMLHttpRequest，否则使用ActiveXObject,
关于XMLHttpRequest对象，IE5是第一个引入XHR对象的浏览器，在IE5中，XHR是通过activeX对象实现的.<br>因此在IE中可能遇到三种不同版本的XHR对象，MXSML2.XMLHTTP，MXSML2.XMLHttp.3.0和MXSML2.XMLHttp.6.0。

<br>IE的坑

<br><br>为了向我们伟大的IE浏览器“致敬”，我们必须添加额外的代码进行创建 以下代码适用与IE7以下的情况：
<pre>
function createXHR(){
    if(typeof argument.callee.activeXString != 'string'){
        var versions = ['MXSML2.XMLHTTP','MXSML2.XMLHttp.3.0','MXSML2.XMLHttp.6.0'];
        var i len;
        for(i = 0;len=versions.length;i<len;i++){
            try{
                new ActiveXObject(varsions[i]);
                argument.callee.activeXString = varsions[i];
            }catch{
                <!-- 跳过 -->
            }
        }
    }
    return new ActiveXObject(argument.callee.activeXString);
}
</pre>
<br>完整走一遍
但往往我不会考虑这么多，能看懂前面的函数也是很不容易了，再让我写出来，我的天！当大家和我这么懒的时候，可以直接使用<br>第一份代码，也就是w3school那一套代码，我们使用原生的XHR对象进行创建。 当然，我们这里也给出完整的代码。
<pre>
function createXHR(){
    if(typeof XMLHttpRequest != 'undefined'){
        return new XMLHttpRequest();
    }else if(typeof argument.callee.activeXString != 'string'){
        var versions = ['MXSML2.XMLHTTP','MXSML2.XMLHttp.3.0','MXSML2.XMLHttp.6.0'];
        var i len;
        for(i = 0;len=versions.length;i<len;i++){
            try{
                new ActiveXObject(varsions[i]);
                argument.callee.activeXString = varsions[i];
            }catch{
                <!-- 跳过 -->
            }
        }
        return new ActiveXObject(argument.callee.activeXString);
    }else{
        throw new Error("没有XHR对象存在");
    }
}
</pre>
<br>用法
<pre>
        function returnText(){
            var xhr = createXHR();
            xhr.onreadystatechange = function(){
                if(xhr.readyState == 4){
                    if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304){
                        alert(xhr.responseText);
                    }else{
                        alert('获取失败'+xhr.status)
                    }
                }
            }
            xhr.open('get','demo.php',true);
            xhr.send(null);
        }
        function createXHR(){
            if(typeof XMLHttpRequest != 'undefined'){
                return new XMLHttpRequest();
            }else{
                return new ActiveXObject('Microsoft.XMLHTTP')
            }
        }
</pre>
<br>创建好XHR对象只是第一步，才是我们各种操作的开始。

<br>open()

<br>open()函数会启动一个请求,但并不是发送，可以看作办事之前的准备。 它接受三个函数:

<br> 
<pre> open(get/post,url,false/true)</pre>


<br>请求类型:最常用的就是get和post

<br>路径：就是要请求的操作的文件的url

<br>是否异步,一般会使用 true ,用 false 毫无意义...

<br>我们这是使用的是get方式，因为我们并没有要发送的数据。异步我们选择了true,无意中发现在使用false时候，火狐出现了警告：

<br>主线程中同步的 XMLHttpRequest 已不推荐使用，因其对终端用户的用户体验存在负面影响。

<br>具体需要再了解。

<br><pre>send(data); </pre>


<br>自然而然，准备好了就要发送，send()<br>只接受一个参数，那就是要发送的数据。我们使用的是get，数据已经在URL中，那就null好了。

<br>php

<br>因为这篇文章主要是讲ajax，所以php部分我只用了最简单的echo

<xmp>
 <?php
    echo '成功了';
 ?>
</xmp>


<br>这样就能在接受到请求后返回一个字符串。

<br>回调函数

<br>我们怎么样才能直到php文件将数据处理完，返回给客户端了呢？ <br>这时候我们就需要监测XHR的readyState属性。先介绍以下readyState属性：

<br>0：初始化未完成，未调用open()

<br>1: 启动调永了open()函数，但是还没有send

<br>2：发送，调用了send()函数，还没有接收到响应

<br>3：开始接收,接收到部分的数据

<br>4：完成，接收到了全部数据。

所以在上面的函数中我们可以看到，我们去监测readyState属性，等到等于4的时候，也就是数据接收完成之后，我们开始对数据进<br>行处理。

<br>小结

<br>这是一个手动创建XHR对象并使用最简单的方法。以后回继续进行更新。介绍其更详细的用法。
</div>
    </body>
</html>